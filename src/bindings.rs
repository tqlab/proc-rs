/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_t {
    pub pid: ::std::os::raw::c_uint,
    pub percent_cpu: f64,
    pub percent_cpu_user: f64,
    pub percent_cpu_system: f64,
    pub percent_mem: f64,
    pub percent_cpu_process: f64,
    pub percent_mem_process: f64,
    pub mem_total: ::std::os::raw::c_ulonglong,
    pub mem_free: ::std::os::raw::c_ulonglong,
    pub cpu_count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_proc_t() {
    assert_eq!(
        ::std::mem::size_of::<proc_t>(),
        80usize,
        concat!("Size of: ", stringify!(proc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(proc_t))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_percent_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_cpu) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_cpu)
            )
        );
    }
    test_field_percent_cpu();
    fn test_field_percent_cpu_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_cpu_user) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_cpu_user)
            )
        );
    }
    test_field_percent_cpu_user();
    fn test_field_percent_cpu_system() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_cpu_system) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_cpu_system)
            )
        );
    }
    test_field_percent_cpu_system();
    fn test_field_percent_mem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_mem) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_mem)
            )
        );
    }
    test_field_percent_mem();
    fn test_field_percent_cpu_process() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_cpu_process) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_cpu_process)
            )
        );
    }
    test_field_percent_cpu_process();
    fn test_field_percent_mem_process() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).percent_mem_process) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(percent_mem_process)
            )
        );
    }
    test_field_percent_mem_process();
    fn test_field_mem_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_total) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(mem_total)
            )
        );
    }
    test_field_mem_total();
    fn test_field_mem_free() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_free) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(mem_free)
            )
        );
    }
    test_field_mem_free();
    fn test_field_cpu_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<proc_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cpu_count) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(proc_t),
                "::",
                stringify!(cpu_count)
            )
        );
    }
    test_field_cpu_count();
}
extern "C" {
    #[doc = " @brief Get the proc info object"]
    #[doc = ""]
    #[doc = " @param p"]
    pub fn get_proc_info(p: *mut proc_t);
}
extern "C" {
    #[doc = " @brief Free memory"]
    #[doc = ""]
    pub fn free_memory();
}
